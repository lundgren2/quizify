{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tobiaslundgren/Dev/Projects/socify-client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tobiaslundgren/Dev/Projects/socify-client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { Redirect } from 'react-router-dom';\nexport function getUsersOwnPlaylists(_x, _x2) {\n  return _getUsersOwnPlaylists.apply(this, arguments);\n}\n\nfunction _getUsersOwnPlaylists() {\n  _getUsersOwnPlaylists = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(limit, token) {\n    var playlist;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            playlist = null;\n            _context.prev = 1;\n            _context.next = 4;\n            return axios.get('https://api.spotify.com/v1/me/playlists', {\n              params: {\n                limit: limit\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            });\n\n          case 4:\n            playlist = _context.sent;\n            _context.next = 11;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n            return _context.abrupt(\"return\");\n\n          case 11:\n            return _context.abrupt(\"return\", playlist ? playlist.data.items : null);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[1, 7]]);\n  }));\n  return _getUsersOwnPlaylists.apply(this, arguments);\n}\n\nfunction getTracksInPlaylist(_x3, _x4) {\n  return _getTracksInPlaylist.apply(this, arguments);\n}\n\nfunction _getTracksInPlaylist() {\n  _getTracksInPlaylist = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(playlist_id, token) {\n    var tracks;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // if this is an error, clear your localhost and start over!\n            tracks = null;\n            _context2.prev = 1;\n            _context2.next = 4;\n            return axios.get(\"https://api.spotify.com/v1/playlists/\".concat(playlist_id, \"/tracks\"), {\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            });\n\n          case 4:\n            tracks = _context2.sent;\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.log(_context2.t0);\n\n          case 10:\n            return _context2.abrupt(\"return\", tracks.data.items);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this, [[1, 7]]);\n  }));\n  return _getTracksInPlaylist.apply(this, arguments);\n}\n\nfunction getAudioInfo(_x5, _x6) {\n  return _getAudioInfo.apply(this, arguments);\n}\n\nfunction _getAudioInfo() {\n  _getAudioInfo = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(trackIdList, token) {\n    var auidoInfo;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            auidoInfo = null;\n            _context3.prev = 1;\n            _context3.next = 4;\n            return axios.get('https://api.spotify.com/v1/audio-features', {\n              params: {\n                ids: trackIdList.join(',')\n              },\n              headers: {\n                Authorization: 'Bearer ' + token\n              }\n            });\n\n          case 4:\n            auidoInfo = _context3.sent;\n            _context3.next = 10;\n            break;\n\n          case 7:\n            _context3.prev = 7;\n            _context3.t0 = _context3[\"catch\"](1);\n            console.log(_context3.t0);\n\n          case 10:\n            return _context3.abrupt(\"return\", auidoInfo.data.audio_features);\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this, [[1, 7]]);\n  }));\n  return _getAudioInfo.apply(this, arguments);\n}\n\nfunction calcAverageAttribute(attribute, audioInfoList) {\n  var attributeList = audioInfoList.map(function (audioInfo) {\n    return audioInfo[attribute];\n  });\n  var attributeSum = attributeList.reduce(function (accumulator, currentValue) {\n    return accumulator + currentValue;\n  });\n  var attributeAverage = attributeSum / attributeList.length;\n  return attributeAverage;\n}\n\nexport function getPlaylistAudioInfo(_x7, _x8) {\n  return _getPlaylistAudioInfo.apply(this, arguments);\n}\n\nfunction _getPlaylistAudioInfo() {\n  _getPlaylistAudioInfo = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(playlist, token) {\n    var entrys, trackIds, audioInfoList, valenceAverage, energyAverage, danceabilityAverage, acousticnessAverage, instrumentalnessAverage, livenessAverage, loudnessAverage, modeAverage, speechinessAverage, tempoAverage, audioAverages;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return getTracksInPlaylist(playlist.id, token);\n\n          case 2:\n            entrys = _context4.sent;\n            trackIds = entrys.map(function (entry) {\n              return entry.track.id;\n            });\n            _context4.next = 6;\n            return getAudioInfo(trackIds, token);\n\n          case 6:\n            audioInfoList = _context4.sent;\n            valenceAverage = calcAverageAttribute('valence', audioInfoList);\n            energyAverage = calcAverageAttribute('energy', audioInfoList);\n            danceabilityAverage = calcAverageAttribute('danceability', audioInfoList);\n            acousticnessAverage = calcAverageAttribute('acousticness', audioInfoList);\n            instrumentalnessAverage = calcAverageAttribute('instrumentalness', audioInfoList);\n            livenessAverage = calcAverageAttribute('liveness', audioInfoList);\n            loudnessAverage = calcAverageAttribute('loudness', audioInfoList);\n            modeAverage = calcAverageAttribute('mode', audioInfoList);\n            speechinessAverage = calcAverageAttribute('speechiness', audioInfoList);\n            tempoAverage = calcAverageAttribute('tempo', audioInfoList);\n            audioAverages = {\n              valence: valenceAverage,\n              energy: energyAverage,\n              danceability: danceabilityAverage,\n              acousticness: acousticnessAverage,\n              instrumentalness: instrumentalnessAverage,\n              liveness: livenessAverage,\n              loudness: loudnessAverage,\n              mode: modeAverage,\n              speechiness: speechinessAverage,\n              tempo: tempoAverage\n            };\n            return _context4.abrupt(\"return\", audioAverages);\n\n          case 19:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this);\n  }));\n  return _getPlaylistAudioInfo.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/tobiaslundgren/Dev/Projects/socify-client/client/src/utils/service.js"],"names":["axios","Redirect","getUsersOwnPlaylists","limit","token","playlist","get","params","headers","Authorization","console","log","data","items","getTracksInPlaylist","playlist_id","tracks","getAudioInfo","trackIdList","auidoInfo","ids","join","audio_features","calcAverageAttribute","attribute","audioInfoList","attributeList","map","audioInfo","attributeSum","reduce","accumulator","currentValue","attributeAverage","length","getPlaylistAudioInfo","id","entrys","trackIds","entry","track","valenceAverage","energyAverage","danceabilityAverage","acousticnessAverage","instrumentalnessAverage","livenessAverage","loudnessAverage","modeAverage","speechinessAverage","tempoAverage","audioAverages","valence","energy","danceability","acousticness","instrumentalness","liveness","loudness","mode","speechiness","tempo"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { Redirect } from 'react-router-dom';\n\nexport async function getUsersOwnPlaylists(limit, token) {\n  let playlist = null;\n\n  try {\n    playlist = await axios.get('https://api.spotify.com/v1/me/playlists', {\n      params: {\n        limit: limit,\n      },\n      headers: { Authorization: 'Bearer ' + token },\n    });\n  } catch (error) {\n    console.log(error);\n    return;\n  }\n  // TODO: fix ugly solution\n  return playlist ? playlist.data.items : null;\n}\n\nasync function getTracksInPlaylist(playlist_id, token) {\n  // if this is an error, clear your localhost and start over!\n\n  let tracks = null;\n  try {\n    tracks = await axios.get(\n      `https://api.spotify.com/v1/playlists/${playlist_id}/tracks`,\n      {\n        headers: {\n          Authorization: 'Bearer ' + token,\n        },\n      }\n    );\n  } catch (error) {\n    console.log(error);\n  }\n  return tracks.data.items;\n}\n\nasync function getAudioInfo(trackIdList, token) {\n  let auidoInfo = null;\n  try {\n    auidoInfo = await axios.get('https://api.spotify.com/v1/audio-features', {\n      params: {\n        ids: trackIdList.join(','),\n      },\n      headers: { Authorization: 'Bearer ' + token },\n    });\n  } catch (error) {\n    console.log(error);\n  }\n  return auidoInfo.data.audio_features;\n}\n\nfunction calcAverageAttribute(attribute, audioInfoList) {\n  const attributeList = audioInfoList.map(audioInfo => audioInfo[attribute]);\n  const attributeSum = attributeList.reduce(\n    (accumulator, currentValue) => accumulator + currentValue\n  );\n  const attributeAverage = attributeSum / attributeList.length;\n  return attributeAverage;\n}\n\nexport async function getPlaylistAudioInfo(playlist, token) {\n  // if this is an error, clear your localhost and start over!\n  const entrys = await getTracksInPlaylist(playlist.id, token);\n  const trackIds = entrys.map(entry => entry.track.id);\n  const audioInfoList = await getAudioInfo(trackIds, token);\n\n  const valenceAverage = calcAverageAttribute('valence', audioInfoList);\n  const energyAverage = calcAverageAttribute('energy', audioInfoList);\n  const danceabilityAverage = calcAverageAttribute(\n    'danceability',\n    audioInfoList\n  );\n  const acousticnessAverage = calcAverageAttribute(\n    'acousticness',\n    audioInfoList\n  );\n  const instrumentalnessAverage = calcAverageAttribute(\n    'instrumentalness',\n    audioInfoList\n  );\n  const livenessAverage = calcAverageAttribute('liveness', audioInfoList);\n  const loudnessAverage = calcAverageAttribute('loudness', audioInfoList);\n  const modeAverage = calcAverageAttribute('mode', audioInfoList);\n  const speechinessAverage = calcAverageAttribute('speechiness', audioInfoList);\n  const tempoAverage = calcAverageAttribute('tempo', audioInfoList);\n\n  const audioAverages = {\n    valence: valenceAverage,\n    energy: energyAverage,\n    danceability: danceabilityAverage,\n    acousticness: acousticnessAverage,\n    instrumentalness: instrumentalnessAverage,\n    liveness: livenessAverage,\n    loudness: loudnessAverage,\n    mode: modeAverage,\n    speechiness: speechinessAverage,\n    tempo: tempoAverage,\n  };\n\n  return audioAverages;\n}\n"]},"metadata":{},"sourceType":"module"}